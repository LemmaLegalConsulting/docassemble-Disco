---
include:
  - docassemble.AssemblyLine:assembly_line.yml
---
objects:
  - dataloader: DataLoader.using(filename="disco_blurbs.xlsx")
  - ncr: NCRDict.using(object_type=DAObject, there_are_any = True, complete_attribute='complete')
---
modules:
  - .load_data
---
mandatory: True
id: interview order
code: |
  methods
  for method in methods:
    ncr.gather()

  download
---
generic_object: DAObject
code: |
  x[i].category
  x[i].complete = True
---
id: discovery methods
question: |
  What discovery method(s) did you propound?
fields:
  - no label: methods
    datatype: checkboxes
    code: |
      unique_values(dataloader, search_column="Method")
    none of the above: False
---
id: add noncompliant response
question: |
  Add another noncompliant response?
yesno: ncr.there_is_another 
---
id: noncompliant response number
question: |
  Noncompliant response number for ${ method }
fields: 
  - no label: ncr.new_item_name
    choices: 
      - 1
      - 2 
      - 3 
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
---
id: explain noncompliant responses
question: |
  How was the response noncompliant?
fields:
  - no label: x[i].category
    datatype: checkboxes
    code: |
      rows_with_label(dataloader, display_column="Category", filter_column="Method", filter_value=methods)
    none of the above: False
---
id: explain noncompliant responses
question: |
  How was Response ${ i } noncompliant?
fields:
  - no label: ncr[i].label
    datatype: checkboxes
    code: |
      rows_with_label(dataloader, display_column="Label", filter_column="Method", filter_value=methods, filter_column2="Category", filter_value2=ncr[i].category)
    none of the above: False
---
#id: any noncompliant responses
#question: |
#  You said you propounded: ${ methods.true_values() }. 
#  
#  Did the responding party serve noncompliant responses?
#fields:
#  - no label: ncr.there_are_any
#    datatype: yesnoradio
#---
#id: Goodbye
#event: goodbye
#question: |
#  Goodbye
#---
#id: explain noncompliant responses
#question: |
#  How was Response ${ i } noncompliant?
#fields:
#  - no label: select_fields
#--
#code: |
#  separate_column_info = [
#    ('Insufficient Inquiry', 'Insufficient Inquiry', '', False),
#    ('Insufficient Verification', 'Insufficient Verification', '', False),
#    ('Invalid Form of Response', 'Invalid Form of Response', '', False),
#    ('Invalid/Improper Objection', 'Invalid/Improper Objection', '', False),
#    ('Incomplete Response', 'Incomplete Response', '', False),
#  ]
#  combined_column_info = [
#    ('F - Insufficient effort to obtain info', 'Insufficient effort to obtain info', '', True),
#    ('F - Lack of inquiry with agents / sources under responder’s control', 'Lack of inquiry with agents / sources under responder’s control', '', True),
#    ('F - Excludes counsel’s knowledge of nonprivileged facts', 'Excludes counsel’s knowledge of nonprivileged facts', '', True),
#    ('F - Entity verifier hasn’t established foundational knowledge / sufficient inquiry', 'Entity verifier hasn’t established foundational knowledge / sufficient inquiry', '', True),
#    ('F - Not one of four valid forms of response', 'Not one of four valid forms of response', '', True),
#    ('F - Boilerplate Objections', 'Boilerplate Objections', '', True),
#    ('F - Bulk responses', 'Bulk responses', '', True),
#    ('F - Generally evasive, cagey response', 'Generally evasive, cagey response', '', True),
#    ('F - Claimed lack of personal knowledge', 'Claimed lack of personal knowledge', '', True),
#    ('F - Failure to state specific ground for objection', 'Failure to state specific ground for objection', '', True),
#    ('F - Claimed irrelevance or overbreadth', 'Claimed irrelevance or overbreadth', '', True),
#    ('F - Improper 'hearsay" objection', 'Improper 'hearsay" objection', '', True),
#    ('F - Improper "legal contention" or "opinion" objection', 'Improper "legal contention" or "opinion" objection', '', True),
#    ('F - Objection that answer was already given in other discovery', 'Objection that answer was already given in other discovery', '', True),
#    ('F - Verified based on "information and belief"', 'Verified based on "information and belief"', '', True),
#    ('F - Claimed inability to respond', 'Claimed inability to respond', '', True),
#    ('F - Ambiguous', 'Ambiguous', '', True),
#    ('F - Known to propounder', 'Known to propounder', '', True),
#    ('F - Burdensome', 'Burdensome', '', True),
#    ('F - Objection calls for opinion or conclusion', 'Objection calls for opinion or conclusion', '', True),
#    ('F - Objection – "fishing expedition"', 'Objection – "fishing expedition"', '', True),
#    ('F - Not one of three valid response forms', 'Not one of three valid response forms', '', True),
#    ('F - Only partially objected to', 'Only partially objected to', '', True),
#    ('F - Failure to properly sort or categorize documents', 'Failure to properly sort or categorize documents', '', True),
#    ('F - Failure to aver proper inquiry or to indicate the existence or nonexistence of documents', 'Failure to aver proper inquiry or to indicate the existence or nonexistence of documents', '', True),
#    ('F - Failure to identify specific grounds for objection of the request with particularity', 'Failure to identify specific grounds for objection of the request with particularity', '', True),
#    ('F - Assertion of privilege w/o privilege info/log', 'Assertion of privilege w/o privilege info/log', '', True),
#    ('F - Claimed ambiguity', 'Claimed ambiguity', '', True),
#    ('F - Insufficient response to partially-correct RFA', 'Insufficient response to partially-correct RFA', '', True),
#    ('F - Quibble with wording', 'Quibble with wording', '', True),
#    ('F - Claimed inability to admit or deny without reasonable inquiry', 'Claimed inability to admit or deny without reasonable inquiry', '', True),
#    ('F - Untailored "ambiguous" objection without elaboration', 'Untailored "ambiguous" objection without elaboration', '', True)
#  ]
#--
#ode: |
# select_fields = []
# # The big, combined one
# combined_selected_vals = DADict('combined_selected_vals', gathered=True)
# all_combined_vals = []
# for col, label, help_link, is_top_level in combined_column_info:
#   all_vals = [{'value': f'{col};;;{item}', 'label': item, 'group': label} for item in multi_index.get_values(col)]
#   all_combined_vals.extend(all_vals)
# 
# select_fields.append(
#       {'label': 'Noncompliant Responses', 'field': f'combined_selected_vals', 
#        'datatype': 'multiselect',
#        'required': False, 
#        'code': 'all_combined_vals',
#        'help': ""})
# # Then the GIC Industry and Practice area
# vals_for_columns = {}
# selected_vals = {}
# for col, label, tooltip, is_top_level in separate_column_info:
#   vals_for_columns[col] = multi_index.get_values(col)
#   field_info = {'label': label, 'field': f'selected_vals["{col}"]', 
#                 'datatype': 'multiselect', 
#                 'required': False, 'code': f'vals_for_columns["{col}"]'}
#   if tooltip:
#     field_info['help'] = tooltip 
#   select_fields.append(field_info)
---
#id: characteristics
#question: |
#  What characteristics does ${ i } have?
#fields:
#  - no label: pet[i].label_ids
#    datatype: checkboxes
#    code: |
#      rows_with_label(dataloader, display_column="Label", filter_column="Species", filter_value=pet[i].species, filter_column2="Breed", filter_value2=pet[i].breed)
#    none of the above: False
#---
#code: |
#  pet[i].selected_labels_df = dataloader.load_rows(
#    int(val)
#    for val in pet[i].label_ids.true_values()
#  )
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[disco_attachment], filename="disco.docx", title="All forms to download for your records", enabled=True)
---
objects:
  - disco_attachment: ALDocument.using(enabled=True, title="Disco", filename="Disco")
---
attachments:
  - name: Disco
    filename: disco.docx     
    variable name: disco_attachment[i]        
    skip undefined: True
    docx template file: disco.docx
---
id: download
event: download
question: |
  Your form is ready to download.
subquestion: |
  Thank you. Your form is ready to download.
  
  ${ al_user_bundle.download_list_html(format="docx") }

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100